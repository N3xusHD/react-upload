!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).ptt=e()}}((function(){var e={Parser:class{constructor(){this.handlers=[]}addHandler(e,a,d){if(void 0===a&&"function"==typeof e)(a=e).handlerName="unknown";else if("string"==typeof e&&a instanceof RegExp)a=function(e,a,d){let r;function n({title:n,result:l}){if(l[e]&&d.skipIfAlreadyFound)return null;const o=n.match(a),[t,s]=o||[];return t?(l[e]=d.value||r(s||t),o.index):null}return r=d.type?"lowercase"===d.type.toLowerCase()?e=>e.toLowerCase():"bool"===d.type.toLowerCase().slice(0,4)?()=>!0:"int"===d.type.toLowerCase().slice(0,3)?e=>parseInt(e,10):e=>e:e=>e,n.handlerName=e,n}(e,a,d=function(e){return(e=e||{}).skipIfAlreadyFound=e.skipIfAlreadyFound||!0,e.type=e.type||"string",e}(d));else{if("function"!=typeof a)throw new Error(`Handler for ${e} should be a RegExp or a function. Got: ${typeof a}`);a.handlerName=e}this.handlers.push(a)}parse(e){const a={};let d=e.length;for(const r of this.handlers){const n=r({title:e,result:a});n&&n<d&&(d=n)}return a.title=function(e){let a=e;return-1===a.indexOf(" ")&&-1!==a.indexOf(".")&&(a=a.replace(/\./g," ")),(a=a.replace(/_/g," ")).replace(/([(_]|- )$/,"").trim()}(e.slice(0,d)),a}}},a={addDefaults:e=>{e.addHandler("year",/(?!^)[([]?((?:19[0-9]|20[012])[0-9])[)\]]?/,{type:"integer"}),e.addHandler("resolution",/([0-9]{3,4}[pi])/i,{type:"lowercase"}),e.addHandler("resolution",/(4k)/i,{type:"lowercase"}),e.addHandler("extended",/EXTENDED/,{type:"boolean"}),e.addHandler("convert",/CONVERT/,{type:"boolean"}),e.addHandler("hardcoded",/HC|HARDCODED/,{type:"boolean"}),e.addHandler("proper",/(?:REAL.)?PROPER/,{type:"boolean"}),e.addHandler("repack",/REPACK|RERIP/,{type:"boolean"}),e.addHandler("retail",/\bRetail\b/i,{type:"boolean"}),e.addHandler("remastered",/\bRemaster(?:ed)?\b/i,{type:"boolean"}),e.addHandler("unrated",/\bunrated|uncensored\b/i,{type:"boolean"}),e.addHandler("region",/R[0-9]/),e.addHandler("container",/\b(MKV|AVI|MP4)\b/i,{type:"lowercase"}),e.addHandler("source",/\b(?:HD-?)?CAM\b/,{type:"lowercase"}),e.addHandler("source",/\b(?:HD-?)?T(?:ELE)?S(?:YNC)?\b/i,{value:"telesync"}),e.addHandler("source",/\bHD-?Rip\b/i,{type:"lowercase"}),e.addHandler("source",/\bBRRip\b/i,{type:"lowercase"}),e.addHandler("source",/\bBDRip\b/i,{type:"lowercase"}),e.addHandler("source",/\bDVDRip\b/i,{type:"lowercase"}),e.addHandler("source",/\bDVD(?:R[0-9])?\b/i,{value:"dvd"}),e.addHandler("source",/\bDVDscr\b/i,{type:"lowercase"}),e.addHandler("source",/\b(?:HD-?)?TVRip\b/i,{type:"lowercase"}),e.addHandler("source",/\bTC\b/,{type:"lowercase"}),e.addHandler("source",/\bPPVRip\b/i,{type:"lowercase"}),e.addHandler("source",/\bR5\b/i,{type:"lowercase"}),e.addHandler("source",/\bVHSSCR\b/i,{type:"lowercase"}),e.addHandler("source",/\bBluray\b/i,{type:"lowercase"}),e.addHandler("source",/\bWEB-?DL\b/i,{type:"lowercase"}),e.addHandler("source",/\bWEB-?Rip\b/i,{type:"lowercase"}),e.addHandler("source",/\b(?:DL|WEB|BD|BR)MUX\b/i,{type:"lowercase"}),e.addHandler("source",/\b(DivX|XviD)\b/,{type:"lowercase"}),e.addHandler("source",/HDTV/i,{type:"lowercase"}),e.addHandler("codec",/dvix|mpeg2|divx|xvid|[xh][-. ]?26[45]|avc|hevc/i,{type:"lowercase"}),e.addHandler("codec",({result:e})=>{e.codec&&(e.codec=e.codec.replace(/[ .-]/,""))}),e.addHandler("audio",/MD|MP3|mp3|FLAC|Atmos|DTS(?:-HD)?|TrueHD/,{type:"lowercase"}),e.addHandler("audio",/Dual[- ]Audio/i,{type:"lowercase"}),e.addHandler("audio",/AC-?3(?:\.5\.1)?/i,{value:"ac3"}),e.addHandler("audio",/DD5[. ]?1/i,{value:"dd5.1"}),e.addHandler("audio",/AAC(?:[. ]?2[. ]0)?/,{value:"aac"}),e.addHandler("group",/- ?([^\-. ]+)$/),e.addHandler("season",/S([0-9]{1,2}) ?E[0-9]{1,2}/i,{type:"integer"}),e.addHandler("season",/([0-9]{1,2})x[0-9]{1,2}/,{type:"integer"}),e.addHandler("season",/(?:Saison|Season)[. _-]?([0-9]{1,2})/i,{type:"integer"}),e.addHandler("episode",/S[0-9]{1,2} ?E([0-9]{1,2})/i,{type:"integer"}),e.addHandler("episode",/[0-9]{1,2}x([0-9]{1,2})/,{type:"integer"}),e.addHandler("episode",/[\xe9e]p(?:isode)?[. _-]?([0-9]{1,3})/i,{type:"integer"}),e.addHandler("language",/\bRUS\b/i,{type:"lowercase"}),e.addHandler("language",/\bNL\b/,{type:"lowercase"}),e.addHandler("language",/\bFLEMISH\b/,{type:"lowercase"}),e.addHandler("language",/\bGERMAN\b/,{type:"lowercase"}),e.addHandler("language",/\bDUBBED\b/,{type:"lowercase"}),e.addHandler("language",/\b(ITA(?:LIAN)?|iTALiAN)\b/,{value:"ita"}),e.addHandler("language",/\bFR(?:ENCH)?\b/,{type:"lowercase"}),e.addHandler("language",/\bTruefrench|VF(?:[FI])\b/i,{type:"lowercase"}),e.addHandler("language",/\bVOST(?:(?:F(?:R)?)|A)?|SUBFRENCH\b/i,{type:"lowercase"}),e.addHandler("language",/\bMULTi(?:Lang|-VF2)?\b/i,{type:"lowercase"})}},d={};const r=e.Parser,n=new r;return a.addDefaults(n),d.addDefaults=a.addDefaults,d.addHandler=(e,a,d)=>n.addHandler(e,a,d),d.parse=e=>n.parse(e),d.Parser=r,d}));